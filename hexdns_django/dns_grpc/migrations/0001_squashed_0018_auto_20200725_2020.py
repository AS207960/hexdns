# Generated by Django 3.0.7 on 2020-08-09 20:52

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DNSZone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('zone_root', models.CharField(max_length=255)),
                ('last_modified', models.DateTimeField()),
                ('zsk_private', models.TextField(blank=True, null=True)),
                ('active', models.BooleanField(blank=True, default=False)),
                ('charged', models.BooleanField(blank=True, default=True)),
                ('resource_id', models.UUIDField(null=True)),
            ],
            options={
                'verbose_name': 'DNS Zone',
                'verbose_name_plural': 'DNS Zones',
            },
        ),
        migrations.CreateModel(
            name='ReverseDNSZone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('zone_root_address', models.GenericIPAddressField()),
                ('zone_root_prefix', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(128)])),
                ('last_modified', models.DateTimeField()),
                ('zsk_private', models.TextField(blank=True, null=True)),
                ('active', models.BooleanField(blank=True, default=True)),
                ('charged', models.BooleanField(blank=True, default=True)),
                ('resource_id', models.UUIDField(null=True)),
            ],
            options={
                'verbose_name': 'Reverse DNS Zone',
                'verbose_name_plural': 'Reverse DNS Zones',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_id', models.UUIDField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AddressRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('address', models.GenericIPAddressField(verbose_name='Address (IPv4/IPv6)')),
                ('auto_reverse', models.BooleanField(default=False, verbose_name='Automatically serve reverse PTR records')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CAARecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('flag', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(255)])),
                ('tag', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'CAA record',
                'verbose_name_plural': 'CAA records',
            },
        ),
        migrations.CreateModel(
            name='CNAMERecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('alias', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'CNAME record',
                'verbose_name_plural': 'CNAME records',
            },
        ),
        migrations.CreateModel(
            name='DSRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('key_tag', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('algorithm', models.PositiveSmallIntegerField(choices=[(5, 'RSA/SHA-1 (5) INSECURE'), (7, 'RSASHA1-NSEC3-SHA1 (7) INSECURE'), (8, 'RSA/SHA-256 (8)'), (10, 'RSA/SHA-512 (10)'), (13, 'ECDSA Curve P-256 with SHA-256 (13)'), (14, 'ECDSA Curve P-384 with SHA-384 (14)'), (15, 'Ed25519 (15)'), (16, 'Ed448 (16)')])),
                ('digest_type', models.PositiveSmallIntegerField(choices=[(1, 'SHA-1 (1) INSECURE'), (2, 'SHA-256 (2)'), (3, 'GOST R 34.11-94 (3)'), (4, 'SHA-384 (4)')])),
                ('digest', models.TextField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'DS record',
                'verbose_name_plural': 'DS records',
            },
        ),
        migrations.CreateModel(
            name='DynamicAddressRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('current_ipv4', models.GenericIPAddressField(blank=True, null=True, protocol='ipv4')),
                ('current_ipv6', models.GenericIPAddressField(blank=True, null=True, protocol='ipv6')),
                ('password', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MXRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('exchange', models.CharField(max_length=255)),
                ('priority', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'MX record',
                'verbose_name_plural': 'MX records',
            },
        ),
        migrations.CreateModel(
            name='NAPTRRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('order', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('preference', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('flags', models.CharField(max_length=255)),
                ('service', models.CharField(max_length=255)),
                ('regexp', models.CharField(max_length=255)),
                ('replacement', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'NAPTR record',
                'verbose_name_plural': 'NAPTR records',
            },
        ),
        migrations.CreateModel(
            name='NSRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('nameserver', models.CharField(max_length=255, verbose_name='Name server')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'NS record',
                'verbose_name_plural': 'NS records',
            },
        ),
        migrations.CreateModel(
            name='SRVRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('priority', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('weight', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('port', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(65535)])),
                ('target', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'SRV record',
                'verbose_name_plural': 'SRV records',
            },
        ),
        migrations.CreateModel(
            name='SSHFPRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('host_key', models.TextField(verbose_name='Host key (from /etc/ssh/ssh_host_ed25519_key.pub etc.)')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'SSHFP record',
                'verbose_name_plural': 'SSHFP records',
            },
        ),
        migrations.CreateModel(
            name='TXTRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('data', models.TextField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'TXT record',
                'verbose_name_plural': 'TXT records',
            },
        ),
        migrations.CreateModel(
            name='SecondaryDNSZone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('zone_root', models.CharField(max_length=255)),
                ('serial', models.PositiveIntegerField(null=True)),
                ('charged', models.BooleanField(blank=True, default=True)),
                ('active', models.BooleanField(blank=True, default=False)),
                ('primary', models.CharField(default='', max_length=255)),
                ('error', models.BooleanField(blank=True, default=False)),
                ('resource_id', models.UUIDField(null=True)),
            ],
            options={
                'verbose_name': 'Secondary DNS Zone',
                'verbose_name_plural': 'Secondary DNS Zones',
            },
        ),
        migrations.CreateModel(
            name='SecondaryDNSZoneRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(max_length=255)),
                ('ttl', models.PositiveIntegerField(verbose_name='Time to Live (seconds)')),
                ('rtype', models.PositiveSmallIntegerField()),
                ('rdata', models.BinaryField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.SecondaryDNSZone')),
            ],
            options={
                'verbose_name': 'Secondary DNS Zone Record',
                'verbose_name_plural': 'Secondary DNS Zones Record',
                'ordering': ('record_name', 'rtype'),
            },
        ),
        migrations.CreateModel(
            name='PTRRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_address', models.GenericIPAddressField()),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('pointer', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.ReverseDNSZone')),
            ],
            options={
                'verbose_name': 'PTR record',
                'verbose_name_plural': 'PTR records',
            },
        ),
        migrations.CreateModel(
            name='ANAMERecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('alias', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'ANAME record',
                'verbose_name_plural': 'ANAME records',
            },
        ),
        migrations.CreateModel(
            name='ReverseNSRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_address', models.GenericIPAddressField()),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('record_prefix', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(128)])),
                ('nameserver', models.CharField(max_length=255, verbose_name='Name server')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.ReverseDNSZone')),
            ],
            options={
                'verbose_name': 'NS record',
                'verbose_name_plural': 'NS records',
            },
        ),
        migrations.CreateModel(
            name='RPRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('mailbox', models.CharField(max_length=255)),
                ('txt', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'RP record',
                'verbose_name_plural': 'RP records',
            },
        ),
        migrations.CreateModel(
            name='LOCRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('latitude', models.FloatField(validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)], verbose_name='Latitude (deg)')),
                ('longitude', models.FloatField(validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)], verbose_name='Longitude (deg)')),
                ('altitude', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(-100000.0), django.core.validators.MaxValueValidator(42849672.95)], verbose_name='Altitude (m)')),
                ('size', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90000000.0)], verbose_name='Size (m)')),
                ('hp', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90000000.0)], verbose_name='Horizontal precision (m)')),
                ('vp', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90000000.0)], verbose_name='Vertical precision (m)')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'LOC record',
                'verbose_name_plural': 'LOC records',
            },
        ),
        migrations.CreateModel(
            name='HINFORecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('cpu', models.CharField(max_length=255, verbose_name='CPU')),
                ('os', models.CharField(max_length=255, verbose_name='OS')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.DNSZone')),
            ],
            options={
                'verbose_name': 'HINFO record',
                'verbose_name_plural': 'HINFO records',
            },
        ),
    ]
