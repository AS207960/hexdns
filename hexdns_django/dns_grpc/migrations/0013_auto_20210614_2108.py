# Generated by Django 3.1.12 on 2021-06-14 21:08

import as207960_utils.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dns_grpc', '0012_auto_20210415_1123'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='addressrecord',
            options={'ordering': ['record_name']},
        ),
        migrations.AlterModelOptions(
            name='anamerecord',
            options={'ordering': ['record_name'], 'verbose_name': 'ANAME record', 'verbose_name_plural': 'ANAME records'},
        ),
        migrations.AlterModelOptions(
            name='caarecord',
            options={'ordering': ['record_name'], 'verbose_name': 'CAA record', 'verbose_name_plural': 'CAA records'},
        ),
        migrations.AlterModelOptions(
            name='cnamerecord',
            options={'ordering': ['record_name'], 'verbose_name': 'CNAME record', 'verbose_name_plural': 'CNAME records'},
        ),
        migrations.AlterModelOptions(
            name='dsrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'DS record', 'verbose_name_plural': 'DS records'},
        ),
        migrations.AlterModelOptions(
            name='dynamicaddressrecord',
            options={'ordering': ['record_name']},
        ),
        migrations.AlterModelOptions(
            name='hinforecord',
            options={'ordering': ['record_name'], 'verbose_name': 'HINFO record', 'verbose_name_plural': 'HINFO records'},
        ),
        migrations.AlterModelOptions(
            name='locrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'LOC record', 'verbose_name_plural': 'LOC records'},
        ),
        migrations.AlterModelOptions(
            name='mxrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'MX record', 'verbose_name_plural': 'MX records'},
        ),
        migrations.AlterModelOptions(
            name='naptrrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'NAPTR record', 'verbose_name_plural': 'NAPTR records'},
        ),
        migrations.AlterModelOptions(
            name='nsrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'NS record', 'verbose_name_plural': 'NS records'},
        ),
        migrations.AlterModelOptions(
            name='rprecord',
            options={'ordering': ['record_name'], 'verbose_name': 'RP record', 'verbose_name_plural': 'RP records'},
        ),
        migrations.AlterModelOptions(
            name='srvrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'SRV record', 'verbose_name_plural': 'SRV records'},
        ),
        migrations.AlterModelOptions(
            name='sshfprecord',
            options={'ordering': ['record_name'], 'verbose_name': 'SSHFP record', 'verbose_name_plural': 'SSHFP records'},
        ),
        migrations.AlterModelOptions(
            name='txtrecord',
            options={'ordering': ['record_name'], 'verbose_name': 'TXT record', 'verbose_name_plural': 'TXT records'},
        ),
        migrations.CreateModel(
            name='HTTPSRecord',
            fields=[
                ('record_name', models.CharField(default='@', max_length=255, verbose_name='Record name (@ for zone root)')),
                ('ttl', models.PositiveIntegerField(default=3600, verbose_name='Time to Live (seconds)')),
                ('priority', models.PositiveSmallIntegerField(default=1, help_text='Record ordering, from lowest to highest, use 0 for alias mode', validators=[django.core.validators.MaxValueValidator(65535)])),
                ('target', models.CharField(default='.', help_text='A DNS name for rewritten connections', max_length=255)),
                ('target_port', models.PositiveSmallIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(65535)])),
                ('alpns', models.TextField(blank=True, help_text='A comma separated list of supported TLS ALPNs', null=True, verbose_name='ALPNs')),
                ('alpn_mandatory', models.BooleanField(blank=True, help_text='Indicate that ALPN support is required for the connection to succeed', verbose_name='ALPN mandatory')),
                ('no_default_alpn', models.BooleanField(blank=True, help_text='The server does not support the default ALPNs', verbose_name='No default ALPNs')),
                ('ech', models.TextField(blank=True, help_text='TLS Encrypted Client Hello config, Base64 encoded', null=True, verbose_name='TLS ECH')),
                ('ech_mandatory', models.BooleanField(blank=True, help_text='Indicate that TLS ECH support is required for the connection to succeed', verbose_name='ECH mandatory')),
                ('ipv4_hints', models.TextField(blank=True, help_text='A comma separated list of IPv4 addresses to reduce DNS round trips', verbose_name='IPv4 hints')),
                ('ipv4_hints_mandatory', models.BooleanField(blank=True, help_text='Indicate that IPv4 hint support is required for the connection to succeed', verbose_name='IPv4 hints mandatory')),
                ('ipv6_hints', models.TextField(blank=True, help_text='A comma separated list of IPv4 addresses to reduce DNS round trips', verbose_name='IPv6 hints')),
                ('ipv6_hints_mandatory', models.BooleanField(blank=True, help_text='Indicate that IPv6 hint support is required for the connection to succeed', verbose_name='IPv6 hints mandatory')),
                ('extra_params', models.TextField(blank=True, help_text='Extra SVCB parameters not otherwise broken out into individual fields', verbose_name='Extra parameters')),
                ('port', models.PositiveSmallIntegerField(blank=True, default=443, null=True, validators=[django.core.validators.MaxValueValidator(65535)])),
                ('scheme', models.CharField(blank=True, default='https', max_length=255, null=True)),
                ('id', as207960_utils.models.TypedUUIDField(data_type='hexdns_zonehttpsrecord', primary_key=True, serialize=False)),
                ('http2_support', models.BooleanField(blank=True, verbose_name='HTTP/2 support')),
                ('target_port_mandatory', models.BooleanField(default=False, editable=False)),
                ('no_default_alpn_mandatory', models.BooleanField(default=False, editable=False)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_grpc.dnszone')),
            ],
            options={
                'verbose_name': 'HTTPS record',
                'verbose_name_plural': 'HTTPS records',
                'ordering': ['record_name'],
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='httpsrecord',
            index=models.Index(fields=['record_name', 'port', 'zone'], name='dns_grpc_ht_record__613902_idx'),
        ),
    ]
