# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dns_pb2 as dns__pb2


class DnsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/coredns.dns.DnsService/Query',
                request_serializer=dns__pb2.DnsPacket.SerializeToString,
                response_deserializer=dns__pb2.DnsPacket.FromString,
                )
        self.AXFRQuery = channel.unary_stream(
                '/coredns.dns.DnsService/AXFRQuery',
                request_serializer=dns__pb2.DnsPacket.SerializeToString,
                response_deserializer=dns__pb2.DnsPacket.FromString,
                )
        self.UpdateQuery = channel.unary_unary(
                '/coredns.dns.DnsService/UpdateQuery',
                request_serializer=dns__pb2.DnsPacket.SerializeToString,
                response_deserializer=dns__pb2.DnsPacket.FromString,
                )


class DnsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AXFRQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DnsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=dns__pb2.DnsPacket.FromString,
                    response_serializer=dns__pb2.DnsPacket.SerializeToString,
            ),
            'AXFRQuery': grpc.unary_stream_rpc_method_handler(
                    servicer.AXFRQuery,
                    request_deserializer=dns__pb2.DnsPacket.FromString,
                    response_serializer=dns__pb2.DnsPacket.SerializeToString,
            ),
            'UpdateQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateQuery,
                    request_deserializer=dns__pb2.DnsPacket.FromString,
                    response_serializer=dns__pb2.DnsPacket.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coredns.dns.DnsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DnsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coredns.dns.DnsService/Query',
            dns__pb2.DnsPacket.SerializeToString,
            dns__pb2.DnsPacket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AXFRQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coredns.dns.DnsService/AXFRQuery',
            dns__pb2.DnsPacket.SerializeToString,
            dns__pb2.DnsPacket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coredns.dns.DnsService/UpdateQuery',
            dns__pb2.DnsPacket.SerializeToString,
            dns__pb2.DnsPacket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
